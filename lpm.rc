on early-init
    start ueventd

on init
    export PATH /sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin
    export LD_LIBRARY_PATH /vendor/lib:/system/lib
    export ANDROID_ROOT /system

    symlink /system/etc /etc

    mkdir /system
    mkdir /tmp
    mkdir /mnt

on fs
    mount ramfs ramfs /tmp mode=0775
    chown root shell /tmp

on boot
    # CPU Frequency Governor
    write /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor powersave
    write /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor powersave

    write /sys/class/leds/button-backlight/force_disable 1
    write /sys/class/backlight/pwm-backlight/bl_power 0
    write /sys/class/backlight/pwm-backlight/brightness 10

    ifup lo
    hostname localhost
    domainname localdomain

    class_start default
    start charger

service ueventd /sbin/ueventd
    class core
    critical

service console /system/bin/sh
    class core
    console

service charger /sbin/anicharger
    class charger
    user root
    disabled
    oneshot

# adbd is controlled by the persist.service.adb.enable system property
service adbd /sbin/adbd
    disabled

on property:ro.debuggable=1
    start console

# Always start adbd on userdebug and eng builds
# In recovery, always run adbd as root.
on property:ro.debuggable=1
    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 04E8
    write /sys/class/android_usb/android0/idProduct 685E
    write /sys/class/android_usb/android0/functions mass_storage,adb
    write /sys/class/android_usb/android0/enable 1
    write /sys/class/android_usb/android0/iManufacturer ${ro.product.manufacturer}
    write /sys/class/android_usb/android0/iProduct ${ro.product.model}
    write /sys/class/android_usb/android0/iSerial ${ro.serialno}
    start adbd
    setprop service.adb.root 1

# Restart adbd so it can run as root
on property:service.adb.root=1
    write /sys/class/android_usb/android0/enable 0
    restart adbd
    write /sys/class/android_usb/android0/enable 1

